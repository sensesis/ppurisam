events {}

http {
    # 성공 여부를 결정하는 조건
    map $status $is_success {
        ~^[23] 1;  # 상태코드 2xx, 3xx는 성공
        default 0; # 그 외는 실패
    }

    # 오류 여부를 결정하는 조건
    map $status $is_error {
        ~^[45] 1;  # 상태코드 4xx, 5xx는 오류
        default 0; # 그 외는 오류 아님
    }

    # 성공 로그 포맷 정의
    log_format json_success escape=json '{'
        '"@timestamp":"$time_iso8601",'
        '"remote_addr":"$remote_addr",'
        '"request":"$request",'
        '"status":"$status",'
        '"body_bytes_sent":"$body_bytes_sent"'
    '}';

    # Nginx 오류 로그 포맷 정의
    log_format json_nginx_error escape=json '{'
        '"@timestamp":"$time_iso8601",'
        '"remote_addr":"$remote_addr",'
        '"request":"$request",'
        '"status":"$status",'
        '"body_bytes_sent":"$body_bytes_sent",'
        '"error_message":"$upstream_status",'
        '"http_referer":"$http_referer",'
        '"http_user_agent":"$http_user_agent"'
    '}';

    # 성공 로그 저장 (Nginx만)
    access_log /var/log/backend_logs/nginx-success.log json_success if=$is_success;

    # Nginx 오류 로그 저장
    access_log /var/log/backend_logs/nginx-error.log json_nginx_error if=$is_error;

    # 기본 Nginx 오류 로그
    error_log /var/log/backend_logs/nginx-default-error.log;

    upstream backend {
        server ppurisam_backend:8080;
    }

    upstream frontend {
        server ppurisam_frontend:3000;
    }

    server {
        listen 80;

        location /api/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /open-api/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Vite HMR WebSocket 프록시
        location /@vite/ {
            proxy_pass http://frontend;                # Vite 개발 서버
            proxy_http_version 1.1;                    # WebSocket 연결을 위해 HTTP 1.1 사용
            proxy_set_header Upgrade $http_upgrade;    # WebSocket 업그레이드 설정
            proxy_set_header Connection "upgrade";     # 연결 업그레이드 설정
            proxy_set_header Host $host;               # 클라이언트 요청의 Host 헤더 전달
            proxy_set_header X-Real-IP $remote_addr;   # 클라이언트 실제 IP 전달
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_read_timeout 180s;                    # 읽기 타임아웃
            proxy_send_timeout 180s;                    # 쓰기 타임아웃
        }

         # Prometheus 메트릭 엔드포인트 설정
         location /metrics {
             stub_status;      # Nginx 상태 정보를 노출
             allow all;        # 추후 배포할 때 수정 필요
         }

         location /images/ {
            proxy_pass http://backend/images/; # 백엔드의 이미지 경로
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
   }
}
